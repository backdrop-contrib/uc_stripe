<?php

/**
 * @file
 * Installation file for the uc_stripe module.
 */


/**
 * Implements hook_requirements().
 */
function uc_stripe_requirements($phase) {
  $t = get_t();
  $has_curl = function_exists('curl_init');

  $requirements['uc_stripe_curl'] = array(
    'title' => $t('cURL'),
    'value' => $has_curl ? $t('Enabled') : $t('Not found'),
  );

  if (!$has_curl) {
    $requirements['uc_stripe_curl']['severity'] = REQUIREMENT_ERROR;
    $requirements['uc_stripe_curl']['description'] = $t("The Stripe API requires the PHP <a href='!curl_url'>cURL</a> library.", array('!curl_url' => 'http://php.net/manual/en/curl.setup.php'));
  }

  // libraries_info() doesn't work until the module is installed, so allow to be
  // installed without the library. Then warn at that point.
  if ($phase != 'install') {
    $php_api_version = _uc_stripe_load_library();
    $requirements['uc_stripe_api'] = array(
      'title' => $t('Stripe PHP Library'),
      'value' => $t('Version !version', array('!version' => $php_api_version)),
    );
    if (empty($php_api_version)) {
      $requirements['uc_stripe_api']['value'] = $t('Not installed or wrong version');
      $requirements['uc_stripe_api']['severity'] = REQUIREMENT_ERROR;
      $requirements['uc_stripe_api']['description'] = $t('Please install a compatible version of the Stripe PHP Library versions as described in the README.txt');
    }
  }


  $requirements['uc_stripe_keys'] = array(
    'title' => $t('Stripe API Keys'),
    'value' => $t('Configured'),
  );
  if ($phase == 'runtime' && !_uc_stripe_check_api_keys()) {
    $requirements['uc_stripe_keys']['title'] = $t('Stripe API Keys.');
    $requirements['uc_stripe_keys']['value'] = $t('Not configured');
    $requirements['uc_stripe_keys']['severity'] = REQUIREMENT_ERROR;
    $requirements['uc_stripe_keys']['description'] = $t('The Stripe API keys are not fully configured.');
  }

  // Make sure they don't enable the "Check credit"
  // TODO This variable was probably removed in Backdrop without replacement.
  if ($phase == 'runtime' && variable_get('uc_credit_validate_numbers', FALSE)) {
    $requirements['uc_stripe_validate_numbers'] = array(
      'title' => t('Stripe Credit Card Validation'),
      'value' => t('Enabled'),
      'severity' => REQUIREMENT_ERROR,
      'description' => t("uc_credit's 'Validate credit card numbers at checkout' option must be disabled when using uc_stripe, as uc_credit never sees the card number."),
    );
  }

  return $requirements;
}

/**
 * Load the PHP API
 *
 * @return Stripe version number as string or FALSE if failed to load
 */
function _uc_stripe_load_library() {
  module_load_include('module', 'uc_stripe');

  if (($library = libraries_load('stripe')) && !empty($library['loaded']) && class_exists('\Stripe\Stripe')) {
    return Stripe Stripe::VERSION;
  }
  watchdog('uc_stripe', 'Stripe PHP Library not installed or wrong version');
  return FALSE;

}

/**
 * Implements hook_install().
 */
function uc_stripe_install() {
  // This turns ON the uc_recurring cron task to renew. We want this
  // ON because the renewal payments are handled by uc_recurring and NOT the stripe gateway
  // TODO This variable was probably removed in Backdrop without replacement.
  variable_set('uc_recurring_trigger_renewals', TRUE);

  // Stripe does cc validation, so uc_credit must not... especially because
  // uc_credit gets a bogus cc number.
  // TODO This variable was probably removed in Backdrop without replacement.
  variable_set('uc_credit_validate_numbers', FALSE);
  // Dynamically generated variable data was detected on the following lines.
  // /uc_stripe/uc_stripe.module line 1162
  // /uc_stripe/uc_stripe.module line 770
}

/**
 * Implements hook_uninstall().
 */
function uc_stripe_uninstall() {
  config_clear('uc_stripe.settings', 'uc_stripe_authentication_required_email');
}

/**
 * Implements hook_schema().
 */
function uc_stripe_schema() {
  $schema['uc_stripe_pending_auth'] = array(
    'description' => 'Ubercart Stripe - Track orders pending authentication',
    'fields' => array(
      'id' => array(
        'description' => 'id of entry',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'Order Id of pending order',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'rfee_id' => array(
        'description' => 'Recurring Fee Id of pending order',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'completed' => array(
        'description' => 'Competion status of this pending order',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'hash' => array(
        'description' => 'The unqiue has of order and payment id',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'hash' => array(
        'hash',
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function uc_stripe_update_7201(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function uc_stripe_update_7202(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function uc_stripe_update_7203(&$sandbox) { }

/**
 * Move customer ids from uc_recurring_stripe into user account
 */
function _uc_stripe_move_customer_id(&$sandbox) {

  // Find the users with stripe customer ids that are active
  $query = '
    SELECT DISTINCT(urs.uid)
    FROM {users} u JOIN {uc_recurring_stripe} urs
    ON (u.uid = urs.uid)
    WHERE urs.active = 1';
  $result = db_query_range($query, 0, $sandbox['per_run'],
    array(),
    array('fetch' => PDO::FETCH_ASSOC));

  foreach ($result as $item) {

    $sandbox['progress']++;
    $stripe_customer_id = db_query_range('
      SELECT urs.customer_id
      FROM {uc_recurring_stripe} urs
      WHERE urs.uid = :uid AND urs.active = 1
      ORDER BY urs.rfid DESC
      ', 0, 1, array(':uid' => $item['uid']))->fetchField();
    $account = user_load($item['uid']);
    // Set to inactive every subscription for this uid
    db_update('uc_recurring_stripe')
      ->fields(
        array('active' => 0)
      )
      ->condition('uid', $item['uid'])
      ->execute();

    if (empty($account->data['uc_stripe_customer_id'])) {
      user_save($account, array('data' => array('uc_stripe_customer_id' => $stripe_customer_id)));
    }
  }

  if ($sandbox['progress'] >= $sandbox['max'] || $result->rowCount() == 0) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function uc_stripe_update_7301() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function uc_stripe_update_7302() { }

/**
 * Implements hook_update_last_removed().
 */
function uc_stripe_update_last_removed() {
  return 7302;
}

/**
 * Implements hook_update_N().
 */
function uc_stripe_update_1000() {
  $config = config('uc_stripe.settings');
  $config->set('uc_stripe_testmode', update_variable_get('uc_stripe_testmode', 'TRUE'));
  $config->set('uc_stripe_api_key_test_publishable', update_variable_get('uc_stripe_api_key_test_publishable', ''));
  $config->set('uc_stripe_api_key_live_publishable', update_variable_get('uc_stripe_api_key_live_publishable', ''));
  $config->set('uc_stripe_poweredby', update_variable_get('uc_stripe_poweredby', 'FALSE'));
  $config->set('uc_stripe_api_key_test_secret', update_variable_get('uc_stripe_api_key_test_secret', 'FALSE'));
  $config->set('uc_stripe_api_key_live_secret', update_variable_get('uc_stripe_api_key_live_secret', 'FALSE'));
  $config->set('uc_stripe_element_styles', update_variable_get('uc_stripe_element_styles', 'dynamic value in file /uc_stripe/uc_stripe.module line 1162'));
  $config->set('uc_stripe_authentication_required_email', update_variable_get('uc_stripe_authentication_required_email', 'dynamic value in file /uc_stripe/uc_stripe.module line 770'));
  update_variable_del('uc_stripe_testmode');
  update_variable_del('uc_stripe_api_key_test_publishable');
  update_variable_del('uc_stripe_api_key_live_publishable');
  update_variable_del('uc_stripe_poweredby');
  update_variable_del('uc_stripe_api_key_test_secret');
  update_variable_del('uc_stripe_api_key_live_secret');
  update_variable_del('uc_stripe_element_styles');
  update_variable_del('uc_stripe_authentication_required_email');
}
